use std::str::FromStr;
use crate::ast::*;

grammar;

Comma<T>: Vec<T> = { // (1)
    <mut v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

match {
    "auto",
    "break",
    "case",
    "char",
    "const",
    "continue",
    "default",
    "do",
    "double",
    "else",
    "enum",
    "extern",
    "float",
    "for",
    "goto",
    "if",
    "inline",
    "int",
    "long",
    "register",
    "restrict",
    "return",
    "short",
    "signed",
    "sizeof",
    "static",
    "struct",
    "switch",
    "typedef",
    "union",
    "unsigned",
    "void",
    "volatile",
    "while",
    "{",
    "}",
    "[",
    "]",
    "(",
    ")",
    "+",
    "-",
    "*",
    "/",
    "%",
    "++",
    "--",
    "|",
    "&",
    "<<",
    ">>",
    "^",
    "=",
    "+=",
    "-=",
    "*=",
    "/=",
    "%=",
    "&=",
    "|=",
    "^=",
    ">>=",
    "<<=",
    "==",
    "!=",
    ">",
    "<",
    ">=",
    "<=",
    "&&",
    "||",
    "!",
    "~",
    ",",
    ";",
    ":",
} else {
    r"-?\d+",
    r#""(\"|[^"])*""#,
    r"[_a-zA-Z]\w*"
}

pub PrimitiveType: PrimitiveType = {
    "char" => PrimitiveType::Char,
    "int" => PrimitiveType::Int,
    "long" => PrimitiveType::Long,
    "float" => PrimitiveType::Float,
    "double" => PrimitiveType::Double,
    "void" => PrimitiveType::Void,
};


pub TypeSpecifier: TypeSpecifier = {
    "long" => TypeSpecifier::Long,
    "short" => TypeSpecifier::Short,
    "unsigned" => TypeSpecifier::Unsigned,
    "signed" => TypeSpecifier::Signed,
};


pub TypeQualifier: TypeQualifier = {
    "const" => TypeQualifier::Const,
    "restrict" => TypeQualifier::Restrict,
    "volatile" => TypeQualifier::Volatile,
};

pub Type: Type = {
    <q: TypeQualifier*> <s: TypeSpecifier*> <t: PrimitiveType> => Type {
        primitive: t,
        specifiers: s,
        qualifiers: q,
    }
}

ExprReset: Expr = Expr;
pub Expr: Expr = {
    #[precedence(level = "0")]
    Identifier => Expr::Identifier(<>),
    Litteral => Expr::Litteral(<>),
    "(" <e: ExprReset> ")" => e,

    #[precedence(level = "10")] #[assoc(side="left")]
    <lhs: Expr> "*" <rhs: Expr> => Expr::BinaryOperation { lhs: Box::new(lhs), rhs: Box::new(rhs), op: BinOp::Mul },
    <lhs: Expr> "/" <rhs: Expr> => Expr::BinaryOperation { lhs: Box::new(lhs), rhs: Box::new(rhs), op: BinOp::Div },
    <lhs: Expr> "%" <rhs: Expr> => Expr::BinaryOperation { lhs: Box::new(lhs), rhs: Box::new(rhs), op: BinOp::Mod },

    #[precedence(level = "11")] #[assoc(side="left")]
    <lhs: Expr> "+" <rhs: Expr> => Expr::BinaryOperation { lhs: Box::new(lhs), rhs: Box::new(rhs), op: BinOp::Add },
    <lhs: Expr> "-" <rhs: Expr> => Expr::BinaryOperation { lhs: Box::new(lhs), rhs: Box::new(rhs), op: BinOp::Sub },
    
    #[precedence(level = "12")] #[assoc(side="left")]
    <lhs: Expr> "<<" <rhs: Expr> => Expr::BinaryOperation { lhs: Box::new(lhs), rhs: Box::new(rhs), op: BinOp::ShiftLeft },
    <lhs: Expr> ">>" <rhs: Expr> => Expr::BinaryOperation { lhs: Box::new(lhs), rhs: Box::new(rhs), op: BinOp::ShiftRight },
    
    #[precedence(level = "13")] #[assoc(side="left")]
    <lhs: Expr> "<" <rhs: Expr> => Expr::BinaryOperation { lhs: Box::new(lhs), rhs: Box::new(rhs), op: BinOp::LessThan },
    <lhs: Expr> ">" <rhs: Expr> => Expr::BinaryOperation { lhs: Box::new(lhs), rhs: Box::new(rhs), op: BinOp::GreaterThan },
    <lhs: Expr> "<=" <rhs: Expr> => Expr::BinaryOperation { lhs: Box::new(lhs), rhs: Box::new(rhs), op: BinOp::LessOrEqual },
    <lhs: Expr> ">=" <rhs: Expr> => Expr::BinaryOperation { lhs: Box::new(lhs), rhs: Box::new(rhs), op: BinOp::GreaterOrEqual },
    <lhs: Expr> "==" <rhs: Expr> => Expr::BinaryOperation { lhs: Box::new(lhs), rhs: Box::new(rhs), op: BinOp::Equal },
    <lhs: Expr> "!=" <rhs: Expr> => Expr::BinaryOperation { lhs: Box::new(lhs), rhs: Box::new(rhs), op: BinOp::Different },
    
    #[precedence(level = "14")] #[assoc(side="left")]
    <lhs: Expr> "&" <rhs: Expr> => Expr::BinaryOperation { lhs: Box::new(lhs), rhs: Box::new(rhs), op: BinOp::BAnd },
    <lhs: Expr> "|" <rhs: Expr> => Expr::BinaryOperation { lhs: Box::new(lhs), rhs: Box::new(rhs), op: BinOp::BOr },
    <lhs: Expr> "^" <rhs: Expr> => Expr::BinaryOperation { lhs: Box::new(lhs), rhs: Box::new(rhs), op: BinOp::Xor },
    
    #[precedence(level = "15")] #[assoc(side="left")]
    <lhs: Expr> "&&" <rhs: Expr> => Expr::BinaryOperation { lhs: Box::new(lhs), rhs: Box::new(rhs), op: BinOp::LAnd },
    <lhs: Expr> "||" <rhs: Expr> => Expr::BinaryOperation { lhs: Box::new(lhs), rhs: Box::new(rhs), op: BinOp::LOr },

    #[precedence(level = "20")]
    <i: Identifier> "(" <p: Comma<Expr>> ")" => Expr::FunctionCall { name: i, parameters: p }
};

Identifier: String = <s:r"[_a-zA-Z]\w*"> => s.to_owned();

IntLitteral: i128 = <s:r"-?\d+"> => i128::from_str(s).unwrap();
StringLitteral: String = <s:r#""(\"|[^"])*""#> => s.to_owned();
pub Litteral: Litteral = {
    IntLitteral => Litteral::Integer(<>),
    StringLitteral => Litteral::String(<>),
}

VariableInitializer: Expr = {
    "=" <e: Expr> => e
};
VariableDeclaration: (Identifier, Option<Expr>) = {
    <i: Identifier> <v: VariableInitializer?> => (<>)
}

pub Statement: Statement = {
    <t: Type> <v: Comma<VariableDeclaration>> ";" => Statement::Declaration { type_: t, variables: v },
    <e: Expr> ";" => Statement::Expression(e),
    "if" "(" <c: Expr> ")" "{" <t: Statement*> "}" "else" "{" <f: Statement*> "}" => Statement::IfElse(IfElseStruct { condition: c, true_case: Box::new(Statement::Block(t)), false_case: Some(Box::new(Statement::Block(f))) }),
    "while" "(" <c: Expr> ")" "{" <b: Statement*> "}" => Statement::While(WhileStruct { condition: c, body: Box::new(Statement::Block(b)) }),
    "do" "{" <b: Statement*> "}" "while" "(" <c: Expr> ")" ";" => Statement::DoWhile(DoWhileStruct { condition: c, body: Box::new(Statement::Block(b)) }),
    "return" <v: Expr?> ";" => Statement::Return(ReturnStruct { value: v}),
};

FunctionParameter: (Type, Identifier) = {
    <t: Type> <i: Identifier> => (<>)
}
pub TopLevelDeclaration: TopLevelDeclaration = {
    <t: Type> <i: Identifier> "(" <p: FunctionParameter*> ")" "{" <b: Statement*> "}" => TopLevelDeclaration::Function { return_type: t, name: i, parameters: p, body: b }
}
